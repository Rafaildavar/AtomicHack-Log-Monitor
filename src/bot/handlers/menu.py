"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from ..handlers.upload import UploadStates
from ..services.analysis_history import AnalysisHistory
from ..services.report_generator import ReportGenerator

router = Router(name="menu")
history_service = AnalysisHistory()
report_generator = ReportGenerator()


@router.message(F.text == "–ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–∏")
async def handle_upload_request(message: Message, state: FSMContext) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤."""

    await message.answer(
        "üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –ª–æ–≥–∞–º–∏ (txt, log –∏–ª–∏ zip –∞—Ä—Ö–∏–≤).\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã —Ä–∞–∑–º–µ—Ä–æ–º –¥–æ 20MB."
    )
    await state.set_state(UploadStates.waiting_for_file)


@router.message(F.text == "–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
async def handle_status_request(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∏—Å—Ç–æ—Ä–∏—é –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤."""

    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_stats = history_service.get_statistics(user_id)
    global_stats = history_service.get_statistics()

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∞–Ω–∞–ª–∏–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_history = history_service.get_user_history(user_id, limit=3)

    text = "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤:\n\n"

    # –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    text += "üåç –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
    text += f"   –ê–Ω–∞–ª–∏–∑–æ–≤: {global_stats['total_analyses']}\n"
    text += f"   –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {global_stats['total_errors']}\n"
    text += f"   –í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {global_stats['total_warnings']}\n"

    if global_stats['avg_errors_per_analysis'] > 0:
        text += f"   –°—Ä–µ–¥–Ω–µ–µ –æ—à–∏–±–æ–∫ –Ω–∞ –∞–Ω–∞–ª–∏–∑: {global_stats['avg_errors_per_analysis']}\n"

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    text += f"\nüë§ –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
    text += f"   –ê–Ω–∞–ª–∏–∑–æ–≤: {user_stats['total_analyses']}\n"
    text += f"   –í–∞—à–∏—Ö –æ—à–∏–±–æ–∫: {user_stats['total_errors']}\n"
    text += f"   –í–∞—à–∏—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {user_stats['total_warnings']}\n"

    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–Ω–∞–ª–∏–∑—ã
    if user_history:
        text += "\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–Ω–∞–ª–∏–∑—ã:\n"
        for record in user_history:
            text += f"   ‚Ä¢ {record.file_name} ({record.timestamp[:10]}): "
            text += f"{record.error_count} –æ—à–∏–±–æ–∫, {record.warning_count} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π\n"

    # –¢–æ–ø –ø—Ä–æ–±–ª–µ–º
    if user_stats['most_common_errors']:
        text += "\nüö® –í–∞—à–∏ —Ç–æ–ø-–ø—Ä–æ–±–ª–µ–º—ã:\n"
        for error, count in list(user_stats['most_common_errors'].items())[:3]:
            text += f"   ‚Ä¢ {error}: {count} —Ä–∞–∑\n"

    from ..keyboards.main import build_main_menu_keyboard
    await message.answer(text, reply_markup=build_main_menu_keyboard())


@router.message(F.text == "–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞")
async def handle_export_request(message: Message) -> None:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤."""

    user_id = message.from_user.id
    user_history = history_service.get_user_history(user_id, limit=1)

    if not user_history:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤.\n"
            "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –ª–æ–≥–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
        )
        return

    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑
    last_analysis = user_history[0]

    await message.answer("üìÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")

    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        docx_path = await report_generator.generate_docx_report(
            analysis={
                'total_lines': last_analysis.total_lines,
                'error_count': last_analysis.error_count,
                'warning_count': last_analysis.warning_count,
                'sources': last_analysis.sources,
                'top_errors': last_analysis.top_errors
            },
            file_name=last_analysis.file_name,
            user_name=message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        )

        json_path = await report_generator.generate_json_report(
            analysis={
                'total_lines': last_analysis.total_lines,
                'error_count': last_analysis.error_count,
                'warning_count': last_analysis.warning_count,
                'sources': last_analysis.sources,
                'top_errors': last_analysis.top_errors
            },
            file_name=last_analysis.file_name
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        docx_file = await report_generator.get_input_file(docx_path)
        json_file = await report_generator.get_input_file(json_path)

        await message.answer_document(docx_file, caption="üìÑ –û—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤ (DOCX)")
        await message.answer_document(json_file, caption="üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ (JSON)")

        await message.answer(
            "‚úÖ –û—Ç—á–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!\n"
            "DOCX - —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è\n"
            "JSON - —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
        )

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")


@router.message(F.text == "–°–ø—Ä–∞–≤–∫–∞")
async def handle_help_request(message: Message) -> None:
    """–î—É–±–ª–∏—Ä—É–µ–º –≤ –∫–Ω–æ–ø–∫–µ —Å–ø—Ä–∞–≤–∫—É –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –±–æ—Ç–∞."""

    await message.answer(
        "–Ø –ø–æ–º–æ–≥—É –∑–∞–≥—Ä—É–∑–∏—Ç—å –∂—É—Ä–Ω–∞–ª—ã –∏ –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏."
        "\n–ö–æ–º–∞–Ω–¥—ã: /start, /help."
        "\n–°–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.",
    )

