"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤."""

import asyncio
import logging
from typing import Dict

from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, Document

from ..keyboards.main import build_main_menu_keyboard
from ..services.log_parser import LogParser
from ..services.analysis_history import AnalysisHistory

logger = logging.getLogger(__name__)

router = Router(name="upload")
history_service = AnalysisHistory()


class UploadStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤."""
    waiting_for_file = State()


@router.message(F.text == "–ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–∏")
async def start_upload_process(message: Message, state: FSMContext) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤."""

    await message.answer(
        "üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –ª–æ–≥–∞–º–∏ (txt, log –∏–ª–∏ zip –∞—Ä—Ö–∏–≤).\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã —Ä–∞–∑–º–µ—Ä–æ–º –¥–æ 20MB."
    )
    await state.set_state(UploadStates.waiting_for_file)


@router.message(UploadStates.waiting_for_file, F.document)
async def handle_file_upload(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ª–æ–≥–∞–º–∏."""

    document = message.document

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    if document.file_size and document.file_size > 20 * 1024 * 1024:
        await message.answer(
            "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 20MB).\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∂–∞—Ç—å —Ñ–∞–π–ª –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω—å—à–∏–π."
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    allowed_extensions = ['.txt', '.log', '.zip']
    file_name = document.file_name.lower() if document.file_name else ""

    if not any(file_name.endswith(ext) for ext in allowed_extensions):
        await message.answer(
            "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .txt, .log –∏–ª–∏ .zip –∞—Ä—Ö–∏–≤—ã.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."
        )
        return

    await message.answer("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–π–ª... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")

    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª
        parser = LogParser()
        result = await parser.process_uploaded_file(document, message.bot)

        if result['success']:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
            history_service.add_record(
                user_id=message.from_user.id,
                analysis=result['analysis'],
                file_name=document.file_name or "unknown_file"
            )
            await _send_analysis_result(message, result['analysis'])
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞: {result['error']}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
    finally:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()


@router.message(UploadStates.waiting_for_file)
async def handle_invalid_upload(message: Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞."""

    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –ª–æ–≥–∞–º–∏ (txt, log –∏–ª–∏ zip).\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–∏' –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞."
    )


async def _send_analysis_result(message: Message, analysis: Dict) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""

    if analysis['total_lines'] == 0:
        await message.answer(
            "üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
            "‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    text = "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤:\n\n"

    text += f"üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {analysis['total_lines']}\n"
    text += f"‚ùå –û—à–∏–±–æ–∫ (ERROR/CRITICAL/FATAL): {analysis['error_count']}\n"
    text += f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π (WARNING): {analysis['warning_count']}\n"
    text += f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (INFO): {analysis['info_count']}\n"

    if analysis['time_range']:
        text += f"\n‚è∞ –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:\n"
        text += f"   –û—Ç: {analysis['time_range']['start']}\n"
        text += f"   –î–æ: {analysis['time_range']['end']}\n"

    if analysis['level_distribution']:
        text += "\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º:\n"
        for level, count in analysis['level_distribution'].items():
            text += f"   ‚Ä¢ {level}: {count}\n"

    if analysis['sources']:
        text += "\nüîç –¢–æ–ø –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:\n"
        for source, count in list(analysis['sources'].items())[:5]:
            text += f"   ‚Ä¢ {source}: {count}\n"

    if analysis['top_messages']:
        text += "\nüí¨ –ù–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
        for msg, count in list(analysis['top_messages'].items())[:3]:
            text += f"   ‚Ä¢ {msg}: {count} —Ä–∞–∑\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    await message.answer(
        text,
        reply_markup=build_main_menu_keyboard()
    )

    # –ï—Å–ª–∏ –µ—Å—Ç—å –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    if analysis['error_count'] > 10:
        await message.answer(
            "üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫!\n"
            "–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞'."
        )
