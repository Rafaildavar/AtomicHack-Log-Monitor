"""–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–≥–∏–∫—É –∫–æ–ª–ª–µ–≥–∏ —á–µ—Ä–µ–∑ API.
"""

import requests
import os

API_URL = "http://localhost:8000"


def test_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint...")
    response = requests.get(f"{API_URL}/health")
    
    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç: {data['status']}")
        print(f"   ML –º–æ–¥–µ–ª—å: {data['ml_model']}")
        return True
    else:
        print(f"‚ùå API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {response.status_code}")
        return False


def test_analyze_logs(log_file_path):
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤."""
    if not os.path.exists(log_file_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {log_file_path}")
        return False
    
    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {log_file_path}")
    
    with open(log_file_path, 'rb') as f:
        files = {'log_file': f}
        data = {'threshold': 0.7}
        
        response = requests.post(
            f"{API_URL}/api/v1/analyze",
            files=files,
            data=data
        )
    
    if response.status_code == 200:
        result = response.json()
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"   –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {result['analysis']['basic_stats']['total_lines']}")
        print(f"   Errors: {result['analysis']['basic_stats']['error_count']}")
        print(f"   Warnings: {result['analysis']['basic_stats']['warning_count']}")
        print(f"\nüéØ ML-–∞–Ω–∞–ª–∏–∑:")
        print(f"   –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {result['analysis']['ml_results']['total_problems']}")
        print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π: {result['analysis']['ml_results']['unique_anomalies']}")
        print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º: {result['analysis']['ml_results']['unique_problems']}")
        
        if result.get('excel_report'):
            print(f"\nüìÑ Excel –æ—Ç—á–µ—Ç: {API_URL}{result['excel_report']}")
        
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {response.status_code}")
        print(f"   {response.text}")
        return False


def test_download_default_dictionary():
    """–¢–µ—Å—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è."""
    print("\nüîç –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è...")
    
    response = requests.get(f"{API_URL}/api/v1/anomalies/default")
    
    if response.status_code == 200:
        print(f"‚úÖ –°–ª–æ–≤–∞—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω")
        return True
    else:
        print(f"‚ùå –°–ª–æ–≤–∞—Ä—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
        return False


if __name__ == "__main__":
    print("=" * 60)
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AtomicHack Log Monitor API")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ health
    if not test_health():
        print("\n‚ö†Ô∏è  API –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: cd api && python main.py")
        exit(1)
    
    # –¢–µ—Å—Ç —Å–ª–æ–≤–∞—Ä—è
    test_download_default_dictionary()
    
    # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞
    # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
    test_file = "Test Cases/TestCase1/Logs.txt"
    
    if os.path.exists(test_file):
        test_analyze_logs(test_file)
    else:
        print(f"\n‚ö†Ô∏è  –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}")
        print("   –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤ –≤ test_api.py")
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    print("=" * 60)
    print("\nüìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")

