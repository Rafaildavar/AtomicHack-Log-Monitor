import { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { X, Loader2, FileText, Package } from 'lucide-react';
import { api } from '../../api/client';

interface GraphModalProps {
  isOpen: boolean;
  onClose: () => void;
  filename: string;
  isZip: boolean;
  fileId: string;  // ID —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
}

export default function GraphModal({ isOpen, onClose, filename, isZip, fileId }: GraphModalProps) {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [graphHtml, setGraphHtml] = useState<string>('');
  const [graphUrl, setGraphUrl] = useState<string>('');
  const [zipFiles, setZipFiles] = useState<string[]>([]);
  const [selectedFile, setSelectedFile] = useState<string | null>(null);
  const iframeRef = useRef<HTMLIFrameElement>(null);

  // –ï—Å–ª–∏ —ç—Ç–æ ZIP, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
  // –î–ª—è TXT —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
  useEffect(() => {
    if (isOpen) {
      if (isZip) {
        // –î–ª—è ZIP –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏—Ç —Å–≤–æ–π ZIP –∏ –º—ã —Ä–∞—Å–ø–∞—Ä—Å–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –Ω–µ–≥–æ
        const commonLogFiles = [
          'app_server1_log.txt',
          'app_server2_log.txt',
          'db_server_log.txt',
          'web_server_log.txt',
          'firewall_log.txt',
          'router_log.txt',
          'backup_server_log.txt',
          'storage_system_log.txt',
          'switch1_log.txt',
          'switch2_log.txt',
        ];
        
        setZipFiles(commonLogFiles);
        console.log('üì¶ –ü–æ–∫–∞–∑—ã–≤–∞—é —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è ZIP:', commonLogFiles);
      }
    } else {
      // –°–±—Ä–æ—Å –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
      if (graphUrl) {
        URL.revokeObjectURL(graphUrl);
      }
      setGraphUrl('');
      setGraphHtml('');
      setZipFiles([]);
      setSelectedFile(null);
      setError(null);
    }
  }, [isOpen, filename, isZip, graphUrl]);

  const handleGenerateGraph = async (targetFilename?: string) => {
    setLoading(true);
    setError(null);
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫
    if (graphUrl) {
      URL.revokeObjectURL(graphUrl);
    }
    setGraphUrl('');
    setGraphHtml('');

    try {
      console.log('üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è file_id:', fileId, 'targetFile:', targetFilename);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º file_id –≤–º–µ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞!
      const response = await api.post(`/api/v1/timeline/by-file-id/${fileId}`, 
        targetFilename ? { selected_file: targetFilename } : {},
        {
          headers: {
            'Content-Type': 'application/json',
          },
        }
      );
      
      const html = response.data as string;
      console.log('‚úÖ –ì—Ä–∞—Ñ–∏–∫ –ø–æ–ª—É—á–µ–Ω, —Ä–∞–∑–º–µ—Ä:', html.length, '–±–∞–π—Ç');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä HTML
      if (html.length > 10000000) { // 10MB –ª–∏–º–∏—Ç
        console.warn('‚ö†Ô∏è HTML —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π:', html.length);
        setError('–ì—Ä–∞—Ñ–∏–∫ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.');
        return;
      }
      
      // –°–æ–∑–¥–∞–µ–º Blob URL –≤–º–µ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è srcDoc (–∏–∑–±–µ–≥–∞–µ–º stack overflow)
      const blob = new Blob([html], { type: 'text/html' });
      const url = URL.createObjectURL(blob);
      
      // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π URL –µ—Å–ª–∏ –±—ã–ª
      if (graphUrl) {
        URL.revokeObjectURL(graphUrl);
      }
      
      setGraphUrl(url);
      setGraphHtml(html); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      console.log('‚úÖ –ì—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ë–ï–ó –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞!');
      
    } catch (err: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞:', err);
      setError(err.response?.data?.detail || err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫');
    } finally {
      setLoading(false);
    }
  };

  const handleFileSelect = (file: string) => {
    setSelectedFile(file);
  };

  const handleGenerateForSelected = () => {
    if (selectedFile) {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ ZIP
      handleGenerateGraph(selectedFile);
    }
  };

  if (!isOpen) return null;

  return (
    <AnimatePresence>
      <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/70 backdrop-blur-sm">
        <motion.div
          initial={{ opacity: 0, scale: 0.95 }}
          animate={{ opacity: 1, scale: 1 }}
          exit={{ opacity: 0, scale: 0.95 }}
          className="relative w-full max-w-5xl max-h-[90vh] bg-atomic-darker rounded-2xl shadow-2xl border border-atomic-blue/30 overflow-hidden"
        >
          {/* Header */}
          <div className="flex items-center justify-between p-6 border-b border-atomic-blue/20">
            <div className="flex items-center space-x-3">
              {isZip ? (
                <Package className="w-6 h-6 text-atomic-accent" />
              ) : (
                <FileText className="w-6 h-6 text-atomic-accent" />
              )}
              <div>
                <h2 className="text-2xl font-bold text-white">
                  {isZip ? '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞' : 'Timeline –≥—Ä–∞—Ñ–∏–∫'}
                </h2>
                <p className="text-sm text-gray-400">{filename}</p>
              </div>
            </div>
            <button
              onClick={onClose}
              className="p-2 rounded-lg hover:bg-white/10 transition-colors"
            >
              <X className="w-6 h-6 text-gray-400" />
            </button>
          </div>

          {/* Content */}
          <div className="p-6 overflow-y-auto max-h-[calc(90vh-140px)]">
            {isZip && !graphHtml ? (
              /* –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ ZIP */
              <div>
                <p className="text-gray-300 mb-4">
                  –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–∑ –∞—Ä—Ö–∏–≤–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è Timeline –≥—Ä–∞—Ñ–∏–∫–∞:
                </p>
                {zipFiles.length === 0 ? (
                  <p className="text-yellow-400">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤...</p>
                ) : (
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                    {zipFiles.map((file) => (
                      <motion.button
                        key={file}
                        whileHover={{ scale: 1.02 }}
                        whileTap={{ scale: 0.98 }}
                        onClick={() => handleFileSelect(file)}
                        className={`flex items-center space-x-3 p-4 rounded-lg border transition-all ${
                          selectedFile === file
                            ? 'border-atomic-accent bg-atomic-accent/10'
                            : 'border-atomic-blue/30 bg-atomic-blue/5 hover:border-atomic-blue/50'
                        }`}
                      >
                        <FileText className="w-5 h-5 text-atomic-accent flex-shrink-0" />
                        <span className="text-white text-left truncate">{file}</span>
                      </motion.button>
                    ))}
                  </div>
                )}
                
                {selectedFile && (
                  <motion.div
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="mt-6 flex justify-center"
                  >
                    <button
                      onClick={handleGenerateForSelected}
                      disabled={loading}
                      className="btn-primary px-8 py-3 text-lg"
                    >
                      {loading ? (
                        <span className="flex items-center space-x-2">
                          <Loader2 className="w-5 h-5 animate-spin" />
                          <span>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...</span>
                        </span>
                      ) : (
                        '–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫'
                      )}
                    </button>
                  </motion.div>
                )}
              </div>
            ) : !isZip && !graphHtml && !loading && !error ? (
              /* –ö–Ω–æ–ø–∫–∞ –¥–ª—è TXT —Ñ–∞–π–ª–∞ */
              <div className="text-center py-12">
                <p className="text-gray-300 mb-6">
                  –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Timeline –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è —Ñ–∞–π–ª–∞ <span className="text-atomic-accent font-semibold">{filename}</span>
                </p>
                <button
                  onClick={() => handleGenerateGraph()}
                  disabled={loading}
                  className="btn-primary px-8 py-3 text-lg"
                >
                  {loading ? (
                    <span className="flex items-center space-x-2">
                      <Loader2 className="w-5 h-5 animate-spin" />
                      <span>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...</span>
                    </span>
                  ) : (
                    '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫'
                  )}
                </button>
              </div>
            ) : null}

            {/* Loading */}
            {loading && (
              <div className="flex flex-col items-center justify-center py-12">
                <Loader2 className="w-12 h-12 text-atomic-accent animate-spin mb-4" />
                <p className="text-gray-400">–ì–µ–Ω–µ—Ä–∏—Ä—É—é Timeline –≥—Ä–∞—Ñ–∏–∫...</p>
              </div>
            )}

            {/* Error */}
            {error && (
              <div className="card border-yellow-500/30 bg-yellow-500/5">
                <p className="text-yellow-300">{error}</p>
              </div>
            )}

            {/* Graph */}
            {graphUrl && (
              <div className="relative overflow-hidden rounded-lg border border-atomic-blue/30">
                <iframe
                  ref={iframeRef}
                  src={graphUrl}
                  title="Timeline Graph"
                  className="w-full border-0"
                  style={{ minHeight: '600px', height: '600px' }}
                  onError={(e) => {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ iframe:', e);
                    setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫');
                  }}
                />
              </div>
            )}
          </div>
        </motion.div>
      </div>
    </AnimatePresence>
  );
}

